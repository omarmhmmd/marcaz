"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendImageNode = void 0;
const graphql_1 = require("gatsby/graphql");
const cache_1 = require("../util/cache");
const getGatsbyImageProps_1 = require("./getGatsbyImageProps");
const graphql_utils_1 = require("gatsby-plugin-image/graphql-utils");
const ImageFormatType = new graphql_1.GraphQLEnumType({
    name: 'SanityImageFormat',
    values: {
        NO_CHANGE: { value: '' },
        JPG: { value: 'jpg' },
        PNG: { value: 'png' },
        WEBP: { value: 'webp' },
    },
});
const ImageFitType = new graphql_1.GraphQLEnumType({
    name: 'SanityImageFit',
    values: {
        CLIP: { value: 'clip' },
        CROP: { value: 'crop' },
        FILL: { value: 'fill' },
        FILLMAX: { value: 'fillmax' },
        MAX: { value: 'max' },
        SCALE: { value: 'scale' },
        MIN: { value: 'min' },
    },
});
const ImagePlaceholderType = new graphql_1.GraphQLEnumType({
    name: `GatsbyImagePlaceholder`,
    values: {
        DOMINANT_COLOR: { value: `dominantColor` },
        BLURRED: { value: `blurred` },
        NONE: { value: `none` },
    },
});
const extensions = new Map();
function extendImageNode(config) {
    const key = cache_1.getCacheKey(config, cache_1.CACHE_KEYS.IMAGE_EXTENSIONS);
    if (extensions.has(key)) {
        return extensions.get(key);
    }
    const extension = getExtension(config);
    extensions.set(key, extension);
    return extension;
}
exports.extendImageNode = extendImageNode;
function getExtension(config) {
    const location = { projectId: config.projectId, dataset: config.dataset };
    const fixed = {
        type: new graphql_1.GraphQLObjectType({
            name: 'SanityImageFixed',
            fields: {
                width: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat) },
                height: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat) },
                src: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
                srcSet: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
                base64: { type: graphql_1.GraphQLString },
                srcWebp: { type: graphql_1.GraphQLString },
                srcSetWebp: { type: graphql_1.GraphQLString },
            },
        }),
        args: {
            width: {
                type: graphql_1.GraphQLInt,
                defaultValue: getGatsbyImageProps_1.DEFAULT_FIXED_WIDTH,
            },
            height: {
                type: graphql_1.GraphQLInt,
            },
            toFormat: {
                type: ImageFormatType,
                defaultValue: '',
            },
        },
        resolve: (image, args) => getGatsbyImageProps_1.getFixedGatsbyImage(image, args, location),
    };
    const fluid = {
        type: new graphql_1.GraphQLObjectType({
            name: 'SanityImageFluid',
            fields: {
                aspectRatio: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat) },
                src: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
                srcSet: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
                sizes: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
                base64: { type: graphql_1.GraphQLString },
                srcWebp: { type: graphql_1.GraphQLString },
                srcSetWebp: { type: graphql_1.GraphQLString },
            },
        }),
        args: {
            maxWidth: {
                type: graphql_1.GraphQLInt,
                defaultValue: getGatsbyImageProps_1.DEFAULT_FLUID_MAX_WIDTH,
            },
            maxHeight: {
                type: graphql_1.GraphQLInt,
            },
            sizes: {
                type: graphql_1.GraphQLString,
            },
            toFormat: {
                type: ImageFormatType,
                defaultValue: '',
            },
        },
        resolve: (image, args) => getGatsbyImageProps_1.getFluidGatsbyImage(image, args, location),
    };
    return {
        fixed,
        fluid,
        gatsbyImageData: graphql_utils_1.getGatsbyImageFieldConfig((image, args) => getGatsbyImageProps_1.getGatsbyImageData(image, args, location), {
            placeholder: {
                type: ImagePlaceholderType,
                defaultValue: `dominantColor`,
                description: `Format of generated placeholder image, displayed while the main image loads. 
BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
DOMINANT_COLOR: a solid color, calculated from the dominant color of the image. 
NONE: no placeholder.`,
            },
            fit: {
                type: ImageFitType,
                defaultValue: 'fill',
            },
        }),
    };
}
//# sourceMappingURL=extendImageNode.js.map