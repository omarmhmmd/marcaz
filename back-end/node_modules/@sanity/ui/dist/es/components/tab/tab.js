var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __assign = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, {forwardRef, useCallback, useEffect, useRef} from "react";
import {useForwardedRef} from "../../hooks";
import {Button} from "../../primitives";
const Tab = forwardRef((props, forwardedRef) => {
  const {
    icon,
    id,
    focused,
    fontSize,
    label,
    onClick,
    onFocus,
    padding = 2,
    selected
  } = props, restProps = __rest(props, [
    "icon",
    "id",
    "focused",
    "fontSize",
    "label",
    "onClick",
    "onFocus",
    "padding",
    "selected"
  ]);
  const elementRef = useRef(null);
  const focusedRef = useRef(false);
  const handleBlur = useCallback(() => {
    focusedRef.current = false;
  }, []);
  const handleFocus = useCallback((event) => {
    focusedRef.current = true;
    if (onFocus)
      onFocus(event);
  }, [onFocus]);
  const ref = useForwardedRef(forwardedRef);
  useEffect(() => {
    if (focused && !focusedRef.current) {
      if (elementRef.current)
        elementRef.current.focus();
      focusedRef.current = true;
    }
  }, [focused]);
  const setRef = (el) => {
    elementRef.current = el;
    ref.current = el;
  };
  return /* @__PURE__ */ React.createElement(Button, __assign(__assign({
    "data-ui": "Tab"
  }, restProps), {
    "aria-selected": selected ? "true" : "false",
    fontSize,
    icon,
    id,
    mode: "bleed",
    onClick,
    onBlur: handleBlur,
    onFocus: handleFocus,
    padding,
    ref: setRef,
    role: "tab",
    selected,
    tabIndex: selected ? 0 : -1,
    text: label,
    type: "button"
  }));
});
Tab.displayName = "Tab";
export {
  Tab
};
