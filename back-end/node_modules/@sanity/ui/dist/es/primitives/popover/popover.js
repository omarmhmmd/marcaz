var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __assign = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import maxSizeModifier from "popper-max-size-modifier";
import React, {cloneElement, forwardRef, useEffect, useMemo, useState} from "react";
import {usePopper} from "react-popper";
import styled, {css} from "styled-components";
import {EMPTY_RECORD} from "../../constants";
import {useForwardedRef} from "../../hooks";
import {Layer, Portal, useBoundaryElement, usePortal} from "../../utils";
import {Card} from "../card";
import {responsiveContainerWidthStyle} from "../container/styles";
import {PopoverArrow} from "./arrow";
import {applyMaxSizeModifier} from "./modifiers/applyMaxSize";
import {matchReferenceWidthModifier} from "./modifiers/matchReferenceWidth";
const Root = styled(Layer)(({$preventOverflow}) => css`
    pointer-events: none;
    display: flex;
    flex-direction: column;

    & > * {
      min-height: 0;
    }

    /* Hide the popover when the reference element is out of bounds */
    ${$preventOverflow && css`
      &[data-popper-reference-hidden='true'] {
        display: none;
      }
    `}
  `);
const PopoverCard = styled(Card)(({$constrainSize}) => css`
    flex: 1;
    max-height: ${$constrainSize && "100%"};
    pointer-events: all;

    && {
      display: flex;
    }

    flex-direction: column;

    & > * {
      min-height: 0;
    }

    ${responsiveContainerWidthStyle}
  `);
const Popover = forwardRef((props, ref) => {
  const boundaryElementContext = useBoundaryElement();
  const {
    allowedAutoPlacements,
    arrow = true,
    boundaryElement: boundaryElementProp = boundaryElementContext,
    children: child,
    content,
    constrainSize,
    disabled,
    fallbackPlacements,
    open,
    padding,
    placement: placementProp,
    portal: portalProp = false,
    preventOverflow,
    radius = 3,
    referenceElement: referenceElementProp,
    matchReferenceWidth,
    shadow = 3,
    scheme,
    style = EMPTY_RECORD,
    tone,
    width = 0
  } = props, restProps = __rest(props, [
    "allowedAutoPlacements",
    "arrow",
    "boundaryElement",
    "children",
    "content",
    "constrainSize",
    "disabled",
    "fallbackPlacements",
    "open",
    "padding",
    "placement",
    "portal",
    "preventOverflow",
    "radius",
    "referenceElement",
    "matchReferenceWidth",
    "shadow",
    "scheme",
    "style",
    "tone",
    "width"
  ]);
  const forwardedRef = useForwardedRef(ref);
  const placement = typeof placementProp === "string" ? placementProp : "bottom";
  const portal = usePortal();
  const boundaryElement = boundaryElementProp || portal.boundaryElement;
  const [referenceElement, setReferenceElement] = useState(null);
  const [popperElement, setPopperElement] = useState(null);
  const [arrowElement, setArrowElement] = useState(null);
  const popperReferenceElement = referenceElementProp || referenceElement;
  const offset = useMemo(() => arrow ? [0, 4] : [0, 0], [arrow]);
  const modifiers = useMemo(() => [
    constrainSize && __assign(__assign({}, maxSizeModifier), {
      options: {
        boundary: boundaryElement || void 0,
        padding: 8
      }
    }),
    constrainSize && applyMaxSizeModifier,
    arrow && {
      name: "arrow",
      options: {
        element: arrowElement,
        padding: 4
      }
    },
    preventOverflow && {
      name: "preventOverflow",
      options: {
        altAxis: true,
        boundary: boundaryElement || void 0,
        padding: 8
      }
    },
    {
      name: "offset",
      options: {offset}
    },
    {
      name: "flip",
      options: {
        allowedAutoPlacements,
        boundary: boundaryElement || void 0,
        fallbackPlacements,
        padding: 8
      }
    },
    matchReferenceWidth && matchReferenceWidthModifier
  ].filter(Boolean), [
    allowedAutoPlacements,
    arrow,
    arrowElement,
    boundaryElement,
    constrainSize,
    fallbackPlacements,
    matchReferenceWidth,
    offset,
    preventOverflow
  ]);
  const popper = usePopper(popperReferenceElement, popperElement, {
    placement,
    modifiers
  });
  const {attributes, forceUpdate, styles} = popper;
  useEffect(() => {
    if (forceUpdate) {
      try {
        forceUpdate();
      } catch (_) {
      }
    }
  }, [content, forceUpdate, open, popperReferenceElement]);
  if (disabled) {
    return child || /* @__PURE__ */ React.createElement(React.Fragment, null);
  }
  const setRef = (el) => {
    const childRef = child.ref;
    setReferenceElement(el);
    if (typeof childRef === "function") {
      childRef(el);
    } else if (childRef) {
      childRef.current = el;
    }
  };
  const setRootRef = (el) => {
    setPopperElement(el);
    forwardedRef.current = el;
  };
  const popoverStyle = __assign(__assign({}, style), styles.popper);
  const node = /* @__PURE__ */ React.createElement(Root, __assign(__assign(__assign({
    "data-ui": "Popover"
  }, restProps), {
    $preventOverflow: preventOverflow,
    ref: setRootRef,
    style: popoverStyle
  }), attributes.popper), /* @__PURE__ */ React.createElement(PopoverCard, {
    $constrainSize: constrainSize,
    "data-ui": "PopoverCard",
    padding,
    radius,
    scheme,
    shadow,
    tone,
    width
  }, arrow && /* @__PURE__ */ React.createElement(PopoverArrow, {
    ref: setArrowElement,
    style: styles.arrow
  }), content));
  return /* @__PURE__ */ React.createElement(React.Fragment, null, child && !referenceElementProp ? cloneElement(child, {ref: setRef}) : child || /* @__PURE__ */ React.createElement(React.Fragment, null), open && /* @__PURE__ */ React.createElement(React.Fragment, null, portalProp && /* @__PURE__ */ React.createElement(Portal, null, node), !portalProp && node));
});
Popover.displayName = "Popover";
export {
  Popover
};
