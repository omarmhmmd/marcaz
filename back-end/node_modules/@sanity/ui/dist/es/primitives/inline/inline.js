var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __assign = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, {forwardRef} from "react";
import styled from "styled-components";
import {Box} from "../box";
import {childrenToElementArray} from "../helpers";
import {inlineBaseStyle, inlineSpaceStyle} from "./styles";
const Root = styled(Box)(inlineBaseStyle, inlineSpaceStyle);
const Inline = forwardRef((props, ref) => {
  const {as, children: childrenProp, space} = props, restProps = __rest(props, ["as", "children", "space"]);
  const children = childrenToElementArray(childrenProp).filter(Boolean);
  return /* @__PURE__ */ React.createElement(Root, __assign(__assign({
    "data-ui": "Inline"
  }, restProps), {
    $space: space,
    forwardedAs: as,
    ref
  }), children.map((child, idx) => /* @__PURE__ */ React.createElement("div", {
    key: idx
  }, child)));
});
Inline.displayName = "Inline";
export {
  Inline
};
