{
  "version": 3,
  "sources": ["../../../../src/components/autocomplete/autocomplete.tsx"],
  "sourcesContent": ["import {ChevronDownIcon} from '@sanity/icons'\nimport React, {\n  cloneElement,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {EMPTY_ARRAY} from '../../constants'\nimport {focusFirstDescendant} from '../../helpers'\nimport {useForwardedRef, useResponsiveProp} from '../../hooks'\nimport {Box, Button, ButtonProps, Card, Spinner, Text, TextInput} from '../../primitives'\nimport {AutocompleteOption} from './autocompleteOption'\nimport {Root, LoadingCard, ListBoxContainer, ListBoxCard} from './styles'\n\ntype OpenButtonProps = Omit<ButtonProps, 'as'> &\n  Omit<React.HTMLProps<HTMLButtonElement>, 'as' | 'ref'>\n\nexport interface BaseAutocompleteOption {\n  value: string\n}\n\nexport interface AutocompleteProps<Option extends BaseAutocompleteOption> {\n  border?: boolean\n  filterOption?: (query: string, option: Option) => boolean\n  fontSize?: number | number[]\n  icon?: React.ComponentType | React.ReactNode\n  id: string\n  loading?: boolean\n  onChange?: (value: string) => void\n  onQueryChange?: (query: string | null) => void\n  onSelect?: (value: string) => void\n  /**\n   * @beta\n   */\n  openButton?: boolean | OpenButtonProps\n  options?: Option[]\n  padding?: number | number[]\n  prefix?: React.ReactNode\n  radius?: number | number[]\n  renderOption?: (option: Option) => React.ReactElement\n  renderValue?: (value: string, option?: Option) => string\n  suffix?: React.ReactNode\n  value?: string\n}\n\ntype AutocompleteOverriddenInputAttrKey =\n  | 'aria-activedescendant'\n  | 'aria-autocomplete'\n  | 'aria-expanded'\n  | 'aria-owns'\n  | 'as'\n  | 'autoCapitalize'\n  | 'autoComplete'\n  | 'autoCorrect'\n  | 'id'\n  | 'inputMode'\n  | 'onChange'\n  | 'onSelect'\n  | 'ref'\n  | 'role'\n  | 'spellCheck'\n  | 'type'\n  | 'value'\n\nconst EMPTY_RECORD = {}\n\nconst defaultRenderValue = (value: string, option?: BaseAutocompleteOption) =>\n  option ? option.value : value\n\nconst defaultFilterOption = (query: string, option: BaseAutocompleteOption) =>\n  option.value.toLowerCase().indexOf(query.toLowerCase()) > -1\n\nconst LIST_IGNORE_KEYS = [\n  'Control',\n  'Shift',\n  'Alt',\n  'Enter',\n  'Home',\n  'End',\n  'PageUp',\n  'PageDown',\n  'Meta',\n  'Tab',\n  'CapsLock',\n]\n\nconst InnerAutocomplete = forwardRef(\n  <Option extends BaseAutocompleteOption>(\n    props: AutocompleteProps<Option> &\n      Omit<React.HTMLProps<HTMLInputElement>, AutocompleteOverriddenInputAttrKey>,\n    ref: React.Ref<HTMLInputElement>\n  ) => {\n    const {\n      border = true,\n      filterOption: filterOptionProp,\n      fontSize = 2,\n      icon,\n      id,\n      loading,\n      onChange,\n      onQueryChange,\n      onSelect,\n      openButton,\n      options: optionsProp,\n      padding: paddingProp = 3,\n      radius = 2,\n      renderOption: renderOptionProp,\n      renderValue = defaultRenderValue,\n      value: valueProp = '',\n      ...restProps\n    } = props\n\n    const defaultRenderOption = useCallback(\n      ({value}: BaseAutocompleteOption) => (\n        <Card as=\"button\" padding={paddingProp} tone=\"inherit\">\n          <Text size={fontSize}>{value}</Text>\n        </Card>\n      ),\n      [fontSize, paddingProp]\n    )\n\n    const renderOption =\n      typeof renderOptionProp === 'function' ? renderOptionProp : defaultRenderOption\n    const filterOption =\n      typeof filterOptionProp === 'function' ? filterOptionProp : defaultFilterOption\n    const [value, setValue] = useState(valueProp)\n    const [query, setQuery] = useState<string | null>(null)\n    const valueRef = useRef(value)\n    const [focused, setFocused] = useState(false)\n    const listboxId = `${id}-listbox`\n    const options = Array.isArray(optionsProp) ? optionsProp : EMPTY_ARRAY\n    const [selectedIndex, setSelectedIndex] = useState(-1)\n    const inputRef = useRef<HTMLInputElement | null>(null)\n    const listRef = useRef<HTMLUListElement | null>(null)\n    const activeItemId = selectedIndex > -1 ? `${id}-option-${selectedIndex}` : undefined\n    const padding = useResponsiveProp(paddingProp)\n    const rootRef = useRef<HTMLDivElement | null>(null)\n    const currentOption = value ? options.find((o) => o.value === value) : undefined\n    const filteredOptions = useMemo(\n      () => options.filter((option) => (query ? filterOption(query, option) : true)),\n      [filterOption, options, query]\n    )\n    const optionsLen = filteredOptions.length\n    const expanded = loading || (focused && optionsLen > 0 && query !== null)\n    const forwardedRef = useForwardedRef(ref)\n\n    const handleRootBlur = useCallback(() => {\n      setTimeout(() => {\n        const rootEl = rootRef.current\n        const focusedEl = document.activeElement\n        const focusInside = rootEl && focusedEl && rootEl.contains(focusedEl)\n\n        if (!focusInside) setFocused(false)\n      }, 0)\n    }, [])\n\n    const handleRootKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLElement>) => {\n        if (event.key === 'ArrowDown') {\n          event.preventDefault()\n          if (!optionsLen) return\n          setSelectedIndex((index) => (index + 1) % optionsLen)\n\n          return\n        }\n\n        if (event.key === 'ArrowUp') {\n          event.preventDefault()\n          if (!optionsLen) return\n          setSelectedIndex((index) => {\n            return index === -1 ? optionsLen - 1 : (optionsLen + index - 1) % optionsLen\n          })\n\n          return\n        }\n\n        if (event.key === 'Escape') {\n          setFocused(false)\n          valueRef.current = ''\n          setQuery(null)\n          if (onQueryChange) onQueryChange(null)\n\n          inputRef.current?.focus()\n\n          return\n        }\n\n        const target = event.target as Node\n        const listEl = listRef.current\n\n        if (\n          (listEl === target || listEl?.contains(target)) &&\n          !LIST_IGNORE_KEYS.includes(event.key)\n        ) {\n          inputRef.current?.focus()\n\n          return\n        }\n      },\n      [onQueryChange, optionsLen]\n    )\n\n    const handleInputChange = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        const q = event.currentTarget.value\n\n        valueRef.current = q\n        setQuery(q)\n        if (onQueryChange) onQueryChange(q)\n      },\n      [onQueryChange]\n    )\n\n    const handleInputFocus = useCallback(() => setFocused(true), [])\n\n    const handleClearButtonClick = useCallback(() => {\n      valueRef.current = ''\n      setValue('')\n      if (onChange) onChange('')\n      setQuery(null)\n      if (onQueryChange) onQueryChange(null)\n      inputRef.current?.focus()\n    }, [onChange, onQueryChange])\n\n    const handleClearButtonFocus = useCallback(() => setFocused(true), [])\n\n    const handleOptionSelect = useCallback(\n      (v: string) => {\n        if (onSelect) onSelect(v)\n        setValue(v)\n        if (onChange) onChange(v)\n        setQuery(null)\n        if (onQueryChange) onQueryChange(null)\n        setFocused(false)\n        inputRef.current?.focus()\n      },\n      [onChange, onSelect, onQueryChange]\n    )\n\n    const handleOpenClick = useCallback(() => {\n      inputRef.current?.focus()\n      setQuery(query || '')\n    }, [query])\n\n    // Change the value when `value` prop changes\n    useEffect(() => {\n      if (valueProp !== valueRef.current) {\n        valueRef.current = valueProp\n        setValue(valueProp)\n      }\n    }, [valueProp])\n\n    // Reset selected item when the list changes\n    // @todo: what if the list changed, but the items have changed?\n    useEffect(() => setSelectedIndex(-1), [optionsLen])\n\n    // Focus the selected item\n    useEffect(() => {\n      const listElement = listRef.current\n\n      if (!listElement) return\n\n      const selectedItemElement = listElement.childNodes[selectedIndex] as HTMLLIElement | undefined\n\n      if (selectedItemElement) {\n        focusFirstDescendant(selectedItemElement)\n      }\n    }, [selectedIndex])\n\n    const setRef = (el: HTMLInputElement | null) => {\n      inputRef.current = el\n      forwardedRef.current = el\n    }\n\n    const clearButton = useMemo(\n      () =>\n        value.length > 0\n          ? {\n              'aria-label': 'Clear',\n              onFocus: handleClearButtonFocus,\n            }\n          : undefined,\n      [handleClearButtonFocus, value]\n    )\n\n    const openButtonBoxPadding = useMemo(() => padding.map((v) => v - 2), [padding])\n    const openButtonPadding = useMemo(() => padding.map((v) => v - 1), [padding])\n    const openButtonProps: OpenButtonProps = useMemo(\n      () => (typeof openButton === 'object' ? openButton : EMPTY_RECORD),\n      [openButton]\n    )\n    const openButtonNode = useMemo(\n      () =>\n        openButton ? (\n          <Box padding={openButtonBoxPadding}>\n            <Button\n              {...openButtonProps}\n              fontSize={fontSize}\n              icon={ChevronDownIcon}\n              mode=\"bleed\"\n              onClick={handleOpenClick}\n              padding={openButtonPadding}\n            />\n          </Box>\n        ) : undefined,\n      [\n        fontSize,\n        handleOpenClick,\n        openButton,\n        openButtonBoxPadding,\n        openButtonPadding,\n        openButtonProps,\n      ]\n    )\n\n    return (\n      <Root\n        data-ui=\"Autocomplete\"\n        onBlur={handleRootBlur}\n        onKeyDown={handleRootKeyDown}\n        ref={rootRef}\n      >\n        <TextInput\n          {...restProps}\n          aria-activedescendant={activeItemId}\n          aria-autocomplete=\"list\"\n          aria-expanded={expanded}\n          aria-owns={listboxId}\n          autoCapitalize=\"off\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          border={border}\n          clearButton={clearButton}\n          fontSize={fontSize}\n          icon={icon}\n          id={id}\n          inputMode=\"search\"\n          onChange={handleInputChange}\n          onClear={handleClearButtonClick}\n          onFocus={handleInputFocus}\n          padding={padding}\n          radius={radius}\n          ref={setRef}\n          role=\"combobox\"\n          spellCheck={false}\n          suffix={openButtonNode}\n          value={query === null ? renderValue(value, currentOption) : query}\n        />\n\n        <ListBoxContainer hidden={!expanded}>\n          <ListBoxCard paddingY={1} radius={1} shadow={2} tabIndex={-1} tone=\"inherit\">\n            <ul aria-multiselectable={false} id={listboxId} ref={listRef} role=\"listbox\">\n              {filteredOptions.map((option, optionIndex) => (\n                <AutocompleteOption\n                  id={`${id}-option-${optionIndex}`}\n                  key={optionIndex}\n                  onSelect={handleOptionSelect}\n                  selected={\n                    selectedIndex > -1 ? optionIndex === selectedIndex : currentOption === option\n                  }\n                  value={option.value}\n                >\n                  {cloneElement(renderOption(option), {disabled: loading, tabIndex: -1})}\n                </AutocompleteOption>\n              ))}\n            </ul>\n\n            <LoadingCard padding={3} style={{opacity: loading ? 0.5 : 0}}>\n              <Spinner />\n            </LoadingCard>\n          </ListBoxCard>\n        </ListBoxContainer>\n      </Root>\n    )\n  }\n)\n\nInnerAutocomplete.displayName = 'Autocomplete'\n\nexport const Autocomplete = InnerAutocomplete as <Option extends BaseAutocompleteOption>(\n  props: AutocompleteProps<Option> &\n    Omit<React.HTMLProps<HTMLInputElement>, AutocompleteOverriddenInputAttrKey> & {\n      ref?: React.Ref<HTMLInputElement>\n    }\n) => React.ReactElement\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA8B;AAC9B,mBAQO;AACP,uBAA0B;AAC1B,qBAAmC;AACnC,mBAAiD;AACjD,wBAAuE;AACvE,gCAAiC;AACjC,oBAA+D;AAoD/D,MAAM,eAAe;AAErB,MAAM,qBAAqB,CAAC,OAAe,WACzC,SAAS,OAAO,QAAQ;AAE1B,MAAM,sBAAsB,CAAC,OAAe,WAC1C,OAAO,MAAM,cAAc,QAAQ,MAAM,iBAAiB;AAE5D,MAAM,mBAAmB;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAGF,MAAM,oBAAoB,6BACxB,CACE,OAEA,QACG;AACH,QACE;AAAA,aAAS;AAAA,IACT,cAAc;AAAA,IACd,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT,SAAS,cAAc;AAAA,IACvB,SAAS;AAAA,IACT,cAAc;AAAA,IACd,cAAc;AAAA,IACd,OAAO,YAAY;AAAA,MAEjB,OADC,mBACD,OADC;AAAA,IAhBH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAIF,QAAM,sBAAsB,8BAC1B,CAAC,CAAC,mBACA,mDAAC,wBAAD;AAAA,IAAM,IAAG;AAAA,IAAS,SAAS;AAAA,IAAa,MAAK;AAAA,KAC3C,mDAAC,wBAAD;AAAA,IAAM,MAAM;AAAA,KAAW,UAG3B,CAAC,UAAU;AAGb,QAAM,eACJ,OAAO,qBAAqB,aAAa,mBAAmB;AAC9D,QAAM,eACJ,OAAO,qBAAqB,aAAa,mBAAmB;AAC9D,QAAM,CAAC,OAAO,YAAY,2BAAS;AACnC,QAAM,CAAC,OAAO,YAAY,2BAAwB;AAClD,QAAM,WAAW,yBAAO;AACxB,QAAM,CAAC,SAAS,cAAc,2BAAS;AACvC,QAAM,YAAY,GAAG;AACrB,QAAM,UAAU,MAAM,QAAQ,eAAe,cAAc;AAC3D,QAAM,CAAC,eAAe,oBAAoB,2BAAS;AACnD,QAAM,WAAW,yBAAgC;AACjD,QAAM,UAAU,yBAAgC;AAChD,QAAM,eAAe,gBAAgB,KAAK,GAAG,aAAa,kBAAkB;AAC5E,QAAM,UAAU,oCAAkB;AAClC,QAAM,UAAU,yBAA8B;AAC9C,QAAM,gBAAgB,QAAQ,QAAQ,KAAK,CAAC,MAAM,EAAE,UAAU,SAAS;AACvE,QAAM,kBAAkB,0BACtB,MAAM,QAAQ,OAAO,CAAC,WAAY,QAAQ,aAAa,OAAO,UAAU,OACxE,CAAC,cAAc,SAAS;AAE1B,QAAM,aAAa,gBAAgB;AACnC,QAAM,WAAW,WAAY,WAAW,aAAa,KAAK,UAAU;AACpE,QAAM,eAAe,kCAAgB;AAErC,QAAM,iBAAiB,8BAAY,MAAM;AACvC,eAAW,MAAM;AACf,YAAM,SAAS,QAAQ;AACvB,YAAM,YAAY,SAAS;AAC3B,YAAM,cAAc,UAAU,aAAa,OAAO,SAAS;AAE3D,UAAI,CAAC;AAAa,mBAAW;AAAA,OAC5B;AAAA,KACF;AAEH,QAAM,oBAAoB,8BACxB,CAAC,UAA4C;AAhKnD;AAiKQ,QAAI,MAAM,QAAQ,aAAa;AAC7B,YAAM;AACN,UAAI,CAAC;AAAY;AACjB,uBAAiB,CAAC,UAAW,SAAQ,KAAK;AAE1C;AAAA;AAGF,QAAI,MAAM,QAAQ,WAAW;AAC3B,YAAM;AACN,UAAI,CAAC;AAAY;AACjB,uBAAiB,CAAC,UAAU;AAC1B,eAAO,UAAU,KAAK,aAAa,IAAK,cAAa,QAAQ,KAAK;AAAA;AAGpE;AAAA;AAGF,QAAI,MAAM,QAAQ,UAAU;AAC1B,iBAAW;AACX,eAAS,UAAU;AACnB,eAAS;AACT,UAAI;AAAe,sBAAc;AAEjC,qBAAS,YAAT,mBAAkB;AAElB;AAAA;AAGF,UAAM,SAAS,MAAM;AACrB,UAAM,SAAS,QAAQ;AAEvB,QACG,YAAW,UAAU,kCAAQ,SAAS,aACvC,CAAC,iBAAiB,SAAS,MAAM,MACjC;AACA,qBAAS,YAAT,mBAAkB;AAElB;AAAA;AAAA,KAGJ,CAAC,eAAe;AAGlB,QAAM,oBAAoB,8BACxB,CAAC,UAA+C;AAC9C,UAAM,IAAI,MAAM,cAAc;AAE9B,aAAS,UAAU;AACnB,aAAS;AACT,QAAI;AAAe,oBAAc;AAAA,KAEnC,CAAC;AAGH,QAAM,mBAAmB,8BAAY,MAAM,WAAW,OAAO;AAE7D,QAAM,yBAAyB,8BAAY,MAAM;AA1NrD;AA2NM,aAAS,UAAU;AACnB,aAAS;AACT,QAAI;AAAU,eAAS;AACvB,aAAS;AACT,QAAI;AAAe,oBAAc;AACjC,mBAAS,YAAT,mBAAkB;AAAA,KACjB,CAAC,UAAU;AAEd,QAAM,yBAAyB,8BAAY,MAAM,WAAW,OAAO;AAEnE,QAAM,qBAAqB,8BACzB,CAAC,MAAc;AAtOrB;AAuOQ,QAAI;AAAU,eAAS;AACvB,aAAS;AACT,QAAI;AAAU,eAAS;AACvB,aAAS;AACT,QAAI;AAAe,oBAAc;AACjC,eAAW;AACX,mBAAS,YAAT,mBAAkB;AAAA,KAEpB,CAAC,UAAU,UAAU;AAGvB,QAAM,kBAAkB,8BAAY,MAAM;AAlP9C;AAmPM,mBAAS,YAAT,mBAAkB;AAClB,aAAS,SAAS;AAAA,KACjB,CAAC;AAGJ,8BAAU,MAAM;AACd,QAAI,cAAc,SAAS,SAAS;AAClC,eAAS,UAAU;AACnB,eAAS;AAAA;AAAA,KAEV,CAAC;AAIJ,8BAAU,MAAM,iBAAiB,KAAK,CAAC;AAGvC,8BAAU,MAAM;AACd,UAAM,cAAc,QAAQ;AAE5B,QAAI,CAAC;AAAa;AAElB,UAAM,sBAAsB,YAAY,WAAW;AAEnD,QAAI,qBAAqB;AACvB,+CAAqB;AAAA;AAAA,KAEtB,CAAC;AAEJ,QAAM,SAAS,CAAC,OAAgC;AAC9C,aAAS,UAAU;AACnB,iBAAa,UAAU;AAAA;AAGzB,QAAM,cAAc,0BAClB,MACE,MAAM,SAAS,IACX;AAAA,IACE,cAAc;AAAA,IACd,SAAS;AAAA,MAEX,QACN,CAAC,wBAAwB;AAG3B,QAAM,uBAAuB,0BAAQ,MAAM,QAAQ,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;AACvE,QAAM,oBAAoB,0BAAQ,MAAM,QAAQ,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;AACpE,QAAM,kBAAmC,0BACvC,MAAO,OAAO,eAAe,WAAW,aAAa,cACrD,CAAC;AAEH,QAAM,iBAAiB,0BACrB,MACE,aACE,mDAAC,uBAAD;AAAA,IAAK,SAAS;AAAA,KACZ,mDAAC,0BAAD,sBACM,kBADN;AAAA,IAEE;AAAA,IACA,MAAM;AAAA,IACN,MAAK;AAAA,IACL,SAAS;AAAA,IACT,SAAS;AAAA,SAGX,QACN;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAIJ,SACE,mDAAC,oBAAD;AAAA,IACE,WAAQ;AAAA,IACR,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,KAAK;AAAA,KAEL,mDAAC,6BAAD,sBACM,YADN;AAAA,IAEE,yBAAuB;AAAA,IACvB,qBAAkB;AAAA,IAClB,iBAAe;AAAA,IACf,aAAW;AAAA,IACX,gBAAe;AAAA,IACf,cAAa;AAAA,IACb,aAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAU;AAAA,IACV,UAAU;AAAA,IACV,SAAS;AAAA,IACT,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA,KAAK;AAAA,IACL,MAAK;AAAA,IACL,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,OAAO,UAAU,OAAO,YAAY,OAAO,iBAAiB;AAAA,OAG9D,mDAAC,gCAAD;AAAA,IAAkB,QAAQ,CAAC;AAAA,KACzB,mDAAC,2BAAD;AAAA,IAAa,UAAU;AAAA,IAAG,QAAQ;AAAA,IAAG,QAAQ;AAAA,IAAG,UAAU;AAAA,IAAI,MAAK;AAAA,KACjE,mDAAC,MAAD;AAAA,IAAI,wBAAsB;AAAA,IAAO,IAAI;AAAA,IAAW,KAAK;AAAA,IAAS,MAAK;AAAA,KAChE,gBAAgB,IAAI,CAAC,QAAQ,gBAC5B,mDAAC,8CAAD;AAAA,IACE,IAAI,GAAG,aAAa;AAAA,IACpB,KAAK;AAAA,IACL,UAAU;AAAA,IACV,UACE,gBAAgB,KAAK,gBAAgB,gBAAgB,kBAAkB;AAAA,IAEzE,OAAO,OAAO;AAAA,KAEb,+BAAa,aAAa,SAAS,CAAC,UAAU,SAAS,UAAU,SAKxE,mDAAC,2BAAD;AAAA,IAAa,SAAS;AAAA,IAAG,OAAO,CAAC,SAAS,UAAU,MAAM;AAAA,KACxD,mDAAC,2BAAD;AAAA;AASd,kBAAkB,cAAc;AAEzB,MAAM,eAAe;",
  "names": []
}
