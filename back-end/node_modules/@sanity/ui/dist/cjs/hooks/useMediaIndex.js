var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};
__markAsModule(exports);
__export(exports, {
  useMediaIndex: () => useMediaIndex
});
var import_react = __toModule(require("react"));
var import_theme = __toModule(require("../theme"));
function _getMediaQuery(media, index) {
  return index === 0 ? `(max-width: ${media[index] - 1}px)` : `screen and (min-width: ${media[index - 1]}px) and (max-width: ${media[index] - 1}px)`;
}
function useMediaIndex() {
  const theme = (0, import_theme.useTheme)();
  const {media} = theme.sanity;
  const [index, setIndex] = (0, import_react.useState)(() => {
    if (typeof window !== "undefined") {
      for (let idx = 0; idx < media.length; idx += 1) {
        const mq = window.matchMedia(_getMediaQuery(media, idx));
        if (mq.matches) {
          return idx;
        }
      }
    }
    return 0;
  });
  (0, import_react.useEffect)(() => {
    const disposeFns = media.map((_, idx) => {
      const mq = window.matchMedia(_getMediaQuery(media, idx));
      const handleChange = () => {
        if (mq.matches)
          setIndex(idx);
      };
      if (mq.addEventListener) {
        mq.addEventListener("change", handleChange);
      } else {
        mq.addListener(handleChange);
      }
      return () => {
        if (mq.removeEventListener) {
          mq.removeEventListener("change", handleChange);
        } else {
          mq.removeListener(handleChange);
        }
      };
    });
    return () => {
      disposeFns.forEach((disposeFn) => disposeFn());
    };
  }, [media]);
  return index;
}
